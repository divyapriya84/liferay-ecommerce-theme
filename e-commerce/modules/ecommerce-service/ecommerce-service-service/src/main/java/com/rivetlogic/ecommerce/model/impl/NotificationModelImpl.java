/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rivetlogic.ecommerce.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.rivetlogic.ecommerce.model.Notification;
import com.rivetlogic.ecommerce.model.NotificationModel;
import com.rivetlogic.ecommerce.service.persistence.NotificationPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Notification service. Represents a row in the &quot;rivetlogic_ecommerce_Notification&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link NotificationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NotificationImpl}.
 * </p>
 *
 * @author isaiulate
 * @see NotificationImpl
 * @see Notification
 * @see NotificationModel
 * @generated
 */
@ProviderType
public class NotificationModelImpl extends BaseModelImpl<Notification>
	implements NotificationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a notification model instance should use the {@link Notification} interface instead.
	 */
	public static final String TABLE_NAME = "rivetlogic_ecommerce_Notification";
	public static final Object[][] TABLE_COLUMNS = {
			{ "orderId", Types.BIGINT },
			{ "subject", Types.VARCHAR },
			{ "body", Types.VARCHAR },
			{ "sender", Types.VARCHAR },
			{ "recipients", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("orderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("subject", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("body", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("recipients", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table rivetlogic_ecommerce_Notification (orderId LONG not null,subject VARCHAR(75) null,body VARCHAR(75) null,sender VARCHAR(75) null,recipients VARCHAR(75) not null,primary key (orderId, recipients))";
	public static final String TABLE_SQL_DROP = "drop table rivetlogic_ecommerce_Notification";
	public static final String ORDER_BY_JPQL = " ORDER BY notification.id.orderId ASC, notification.id.recipients ASC";
	public static final String ORDER_BY_SQL = " ORDER BY rivetlogic_ecommerce_Notification.orderId ASC, rivetlogic_ecommerce_Notification.recipients ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.rivetlogic.ecommerce.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.rivetlogic.ecommerce.model.Notification"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.rivetlogic.ecommerce.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.rivetlogic.ecommerce.model.Notification"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.rivetlogic.ecommerce.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.rivetlogic.ecommerce.model.Notification"),
			true);
	public static final long ORDERID_COLUMN_BITMASK = 1L;
	public static final long RECIPIENTS_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.rivetlogic.ecommerce.service.util.PropsUtil.get(
				"lock.expiration.time.com.rivetlogic.ecommerce.model.Notification"));

	public NotificationModelImpl() {
	}

	@Override
	public NotificationPK getPrimaryKey() {
		return new NotificationPK(_orderId, _recipients);
	}

	@Override
	public void setPrimaryKey(NotificationPK primaryKey) {
		setOrderId(primaryKey.orderId);
		setRecipients(primaryKey.recipients);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new NotificationPK(_orderId, _recipients);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((NotificationPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Notification.class;
	}

	@Override
	public String getModelClassName() {
		return Notification.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("orderId", getOrderId());
		attributes.put("subject", getSubject());
		attributes.put("body", getBody());
		attributes.put("sender", getSender());
		attributes.put("recipients", getRecipients());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long orderId = (Long)attributes.get("orderId");

		if (orderId != null) {
			setOrderId(orderId);
		}

		String subject = (String)attributes.get("subject");

		if (subject != null) {
			setSubject(subject);
		}

		String body = (String)attributes.get("body");

		if (body != null) {
			setBody(body);
		}

		String sender = (String)attributes.get("sender");

		if (sender != null) {
			setSender(sender);
		}

		String recipients = (String)attributes.get("recipients");

		if (recipients != null) {
			setRecipients(recipients);
		}
	}

	@Override
	public long getOrderId() {
		return _orderId;
	}

	@Override
	public void setOrderId(long orderId) {
		_columnBitmask |= ORDERID_COLUMN_BITMASK;

		if (!_setOriginalOrderId) {
			_setOriginalOrderId = true;

			_originalOrderId = _orderId;
		}

		_orderId = orderId;
	}

	public long getOriginalOrderId() {
		return _originalOrderId;
	}

	@Override
	public String getSubject() {
		if (_subject == null) {
			return StringPool.BLANK;
		}
		else {
			return _subject;
		}
	}

	@Override
	public void setSubject(String subject) {
		_subject = subject;
	}

	@Override
	public String getBody() {
		if (_body == null) {
			return StringPool.BLANK;
		}
		else {
			return _body;
		}
	}

	@Override
	public void setBody(String body) {
		_body = body;
	}

	@Override
	public String getSender() {
		if (_sender == null) {
			return StringPool.BLANK;
		}
		else {
			return _sender;
		}
	}

	@Override
	public void setSender(String sender) {
		_sender = sender;
	}

	@Override
	public String getRecipients() {
		if (_recipients == null) {
			return StringPool.BLANK;
		}
		else {
			return _recipients;
		}
	}

	@Override
	public void setRecipients(String recipients) {
		_recipients = recipients;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Notification toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Notification)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NotificationImpl notificationImpl = new NotificationImpl();

		notificationImpl.setOrderId(getOrderId());
		notificationImpl.setSubject(getSubject());
		notificationImpl.setBody(getBody());
		notificationImpl.setSender(getSender());
		notificationImpl.setRecipients(getRecipients());

		notificationImpl.resetOriginalValues();

		return notificationImpl;
	}

	@Override
	public int compareTo(Notification notification) {
		NotificationPK primaryKey = notification.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Notification)) {
			return false;
		}

		Notification notification = (Notification)obj;

		NotificationPK primaryKey = notification.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		NotificationModelImpl notificationModelImpl = this;

		notificationModelImpl._originalOrderId = notificationModelImpl._orderId;

		notificationModelImpl._setOriginalOrderId = false;

		notificationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Notification> toCacheModel() {
		NotificationCacheModel notificationCacheModel = new NotificationCacheModel();

		notificationCacheModel.notificationPK = getPrimaryKey();

		notificationCacheModel.orderId = getOrderId();

		notificationCacheModel.subject = getSubject();

		String subject = notificationCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			notificationCacheModel.subject = null;
		}

		notificationCacheModel.body = getBody();

		String body = notificationCacheModel.body;

		if ((body != null) && (body.length() == 0)) {
			notificationCacheModel.body = null;
		}

		notificationCacheModel.sender = getSender();

		String sender = notificationCacheModel.sender;

		if ((sender != null) && (sender.length() == 0)) {
			notificationCacheModel.sender = null;
		}

		notificationCacheModel.recipients = getRecipients();

		String recipients = notificationCacheModel.recipients;

		if ((recipients != null) && (recipients.length() == 0)) {
			notificationCacheModel.recipients = null;
		}

		return notificationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{orderId=");
		sb.append(getOrderId());
		sb.append(", subject=");
		sb.append(getSubject());
		sb.append(", body=");
		sb.append(getBody());
		sb.append(", sender=");
		sb.append(getSender());
		sb.append(", recipients=");
		sb.append(getRecipients());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.rivetlogic.ecommerce.model.Notification");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>orderId</column-name><column-value><![CDATA[");
		sb.append(getOrderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subject</column-name><column-value><![CDATA[");
		sb.append(getSubject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>body</column-name><column-value><![CDATA[");
		sb.append(getBody());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sender</column-name><column-value><![CDATA[");
		sb.append(getSender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recipients</column-name><column-value><![CDATA[");
		sb.append(getRecipients());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Notification.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Notification.class
		};
	private long _orderId;
	private long _originalOrderId;
	private boolean _setOriginalOrderId;
	private String _subject;
	private String _body;
	private String _sender;
	private String _recipients;
	private long _columnBitmask;
	private Notification _escapedModel;
}